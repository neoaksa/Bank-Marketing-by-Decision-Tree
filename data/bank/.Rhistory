colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE1397", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "0000111111100011001100111000"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("Trisomy","Euploid")
# set parameters and draw the plot
palette(c("#f4dfdf","#dfeaf4", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE1397", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
# R scripts generated  Tue Sep 26 21:51:11 EDT 2017
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
# load series and platform data from GEO
gset <- getGEO(filename="GSE1397_series_matrix.txt.gz", GSEMatrix =TRUE,
destdir= ".", AnnotGPL=T)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "0000111111100011001100111000"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE1397", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# group names for all samples in a series
gsms <- "0000111111100011001100111000"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  #set group names
# order samples by group
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("Trisomy","Euploid")
# set parameters and draw the plot
palette(c("#f4dfdf","#dfeaf4", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE1397", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
data.frame(replicate(10,sample(0:100,1000,rep=TRUE)))
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 2, replace = TRUE)
data.frame(replicate(10,sample(0:100,1000,rep=TRUE)))
sample(c(0,1), 2, replace = FALSE)
x <- 1:10
sample(x[x >  8]) # length 2
sample(x[x >  9]) # oops -- length 10!
sample(x[x > 10]) # length 0
sample(x[x >  9]) # oops -- length 10!
resample(x[x >  9]) # length 1
resample <- function(x, ...) x[sample.int(length(x), ...)]
resample(x[x >  9]) # length 1
data.frame(replicate(10,sample(0:100,1000,rep=TRUE)))
test.data<--data.frame(replicate(10,sample(0:100,1000,rep=TRUE)))
head(test.data)
summary(test.data)
sum.test<-summary(test.data$X1)
sum.test
test.data<--data.frame(replicate(10,sample(0:100,1000,rep=TRUE)))
sum.test<-summary(test.data$X1)
count<-table(test.data$X1,test.data$X2,dnn=c("column1","column2"))
count
count
hist(test.data$X1)
library(ggplot2)
install.packages("ggplot2")
95/2
install.packages("neuralnet")
c(3:5, 11:8, 8 + 0:5)
x <- c(3:5, 11:8, 8 + 0:5)
(ux <- unique(x))
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1,  sqrt.data, hidden=10,
threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1,  sqrt.data, hidden=10,
threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
library(neuralnet)
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1,  sqrt.data, hidden=10,
threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
View(sqrt.data)
View(sqrt.data)
install.packages("kohonen")
install.packages("arules")
## example 1: creating transactions form a list
a_list <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
## example 1: creating transactions form a list
a_list <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
names(a_list) <- paste("Tr",c(1:5), sep = "")
a_list
trans1 <- as(a_list, "transactions")
library("arules")
## coerce into transactions
trans1 <- as(a_list, "transactions")
trans1
ds_iris<-data("iris")
ds_iris<-data("iris")
library(ggplot2)
ggplot(ds_iris,aes(species,Sepal.Length)+
geom_point()
ggplot(ds_iris,aes(species,Sepal.Length)
ggplot(ds_iris,aes(species,Sepal.Length)+
geom_point()
ggplot(ds_iris,aes(species,Sepal.Length))+
geom_point()
ggplot(ds_iris,aes(species,Sepal.Length))
ggplot(iris,aes(species,Sepal.Length))+
geom_point()
ggplot(iris,aes(species,Sepal.Length))
ggplot(iris,aes(Species,Sepal.Length))
ggplot(iris,aes(Species,Sepal.Length))+
geom_point()
ggplot(ds_iris,aes(Species,Sepal.Length))+
geom_point()
ggplot(iris,aes(Species,Sepal.Length))+
geom_point()
who = list(name="Joe", age=45, married=T)
print(who)
print(who$name)
print(who[[1]])
print(who$age)
print(who[[2]])
print(who$married)
print(who[[3]])
names(who)
x1 = seq(1,10,length=25)
x2 = runif(25,3,7)
## and you want to fit the model:
y = 4 + 2*x1 + 7*x2 + rnorm(25,0,1)
## First create a data frame
mydata = data.frame(y=y,x1=x1,x2=x2)
lm.out = lm(y ~ x1 + x2, data = mydata)
names(lm.out)
summary(lm.out)
plot(lm.out,ask=F)  ## Plots the fitted curve
par(mfrow=c(2,2))
plot(lm.out,ask=F)
plot(lm.out,ask=F)
par(mfrow=c(1,1))
plot(lm.out,ask=F)
plot(lm.out,ask=F)
par(mfrow=c(2,2))   # Set graphics parameter
plot(lm.out,ask=F)
m <- matrix(1:4, 2)
m
prop.table(m, 1)
m <- matrix(1:4, 2)
m
prop.table(m)
prop.table(table(m)
m <- matrix(1:4)
m
prop.table(table(m))
m <- matrix(1:4, 2)
m
prop.table(m, 1)
consensus(matali, method = c( "majority", "threshold", "IUPAC", "profile")
consensus(matali, method = c( "majority", "threshold", "IUPAC", "profile"),
threshold = 0.60, warn.non.IUPAC = FALSE, type = c("DNA", "RNA"))
install.packages("entropy")
# load entropy library
library("entropy")
x1 = runif(10000)
x1 = runif(10000)
x1
hist(x1, xlim=c(0,1), freq=FALSE)
y1 = discretize(x1, numBins=10, r=c(0,1))
y1
# load entropy library
library("entropy")
### 1D example ####
# sample from continuous uniform distribution
x1 = runif(10000)
x1
y1 = discretize(x1, numBins=10, r=c(0,1))
y1
setwd("~/Google Drive/gvsu/course/CIS678/Decision Tree/data/bank")
# Read CSV into R
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=",")
View(MyData)
View(MyData)
# Read CSV into R
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
View(MyData)
View(MyData)
View(MyData)
View(MyData)
library(rpart)
# grow tree
fit <- rpart(y ~ age + job + marital + education + balance + housing +loan + duration,
method="class", data=MyData)
printcp(fit)
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# grow tree
fit <- rpart(y ~ age + job + marital + education + balance + housing + loan + duration,
method="class", data=MyData)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
install.packages("C50")
x <- MyData[,-1]
y <- MyData[,1]
y
x
x <- MyData[,1:16]
y <- MyData[,17]
x
y
fit <- C50(x,y)
# Classification Tree with rpart
library(C50)
fit <- C50(x,y)
# grow tree
fit <- C5.0(x,y)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
printcp(fit) # display the results
# Read CSV into R
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
# Classification Tree with rpart
library(C50)
x <- MyData[,1:16]
y <- MyData[,17]
# grow tree
fit <- C5.0(x,y)
summary(fit) # detailed summary of splits
library(C50)
x <- MyData[30000,1:16]
y <- MyData[30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y)
summary(fit) # detailed summary of splits
# grow tree
fit <- C5.0(x,y)
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:0000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y)
summary(fit) # detailed summary of splits
# Classification Tree with rpart
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
fit <- C5.0(x,y)
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
# grow tree
fit <- C5.0(x,y, trials = 3)
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
printcp(fit) # display the results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
# Classification Tree with rpart
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
MyData = MyData[,-c('month')]
MyData = MyData[,'month']
MyData
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
MyData = MyData[,-'month']
MyData = MyData[,-c('month')]
c('month')
MyData = MyData[,-c("‘month")]
MyData = MyData[,c("‘month")]
MyData = MyData[,c("month")]
# Read CSV into R
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
MyData = MyData[,c(-"month")]
MyData = subset(MyData,select = -c("month"))
MyData = subset(MyData,select = -c(month))
MyData
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
c(month)
summary(fit) # detailed summary of splits
MyData
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
testx
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
MyData
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
MyData = subset(MyData,select = -c(month))
library(C50)
x <- MyData[1:30000,1:16]
y <- MyData[1:30000,17]
testx <- MyData[30001:45211,1:16]
testy <- MyData[30001:45211,17]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
x
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
View(MyData)
class(MyData)
MyData = subset(MyData,select = -c(month))
class(MyData)
library(C50)
x <- MyData[1:30000,1:15]
y <- MyData[1:30000,16]
testx <- MyData[30001:45211,1:15]
testy <- MyData[30001:45211,16]
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 30))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 50))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
library(C50)
x <- MyData[1:40000,1:15]
y <- MyData[1:40000,16]
testx <- MyData[40001:45211,1:15]
testy <- MyData[40001:45211,16]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 50))
summary(fit) # detailed summary of splits
View(MyData)
View(MyData)
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 30))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 100))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 60))
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
# delete month
MyData = subset(MyData,select = -c(month,contact))
# shuffle data
MyData <- MyData[sample(1:nrow(MyData))]
MyData <- read.csv(file="bank-full.csv", header=TRUE, sep=";")
class(MyData)
# delete month
MyData = subset(MyData,select = -c(month,contact))
MyData <- MyData[sample(1:nrow(MyData))]
MyData <- MyData[sample(1:nrow(MyData)),]
library(C50)
x <- MyData[1:40000,1:15]
y <- MyData[1:40000,16]
testx <- MyData[40001:45211,1:15]
testy <- MyData[40001:45211,16]
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
x <- MyData[1:40000,1:14]
y <- MyData[1:40000,15]
testx <- MyData[40001:45211,1:14]
testy <- MyData[40001:45211,15]
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 10))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
# grow tree
fit <- C5.0(x,y, control = C5.0Control(earlyStopping = TRUE, minCases = 50))
summary(fit) # detailed summary of splits
p <- predict(fit, testx, type="class")
sum(p==testy)/length(p)
plot(fit)
